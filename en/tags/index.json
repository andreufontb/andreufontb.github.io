[{"content":"Hi, in this post I\u0026rsquo;ll explain how to add elastic APM on apache camel application, both, with spwingboot and with camel-main\nI asume that you already have an elastic APM up and running, and Apache Camel 3.x.\nTo capture and sent traces to APM we need to do 3 things:\n Activate camel traces Make this traces in opentracing format Add apm-opentracing plugin, to allow APM read opentracin traces Add an APM agent to capture and send this traces to APM server  1. Prepare y our aplication 1.1 Activate camel tracing Camel already comes with tracing collection support, but it is disabled by defaut, to activate it there are diferent ways depending of your application:\ncamel-main springboot camel-context.xml  1 2 3 4 5 6  # In application.properties camel.main.tracing = true # configure tracing what to include from the exchange camel.context.tracer.exchange-formatter.show-exchange-id = false camel.context.tracer.exchange-formatter.show-headers = true camel.context.tracer.exchange-formatter.show-body-type = false     1 2 3 4 5 6  # In application.properties camel.springboot.tracing = true # configure tracing what to include from the exchange camel.context.tracer.exchange-formatter.show-exchange-id = false camel.context.tracer.exchange-formatter.show-headers = true camel.context.tracer.exchange-formatter.show-body-type = false     1 2 3 4  \u0026lt;!-- Alternatively you cal also do it in camel-context.xml --\u0026gt; \u0026lt;camelContext ..... trace=\u0026#34;true\u0026#34;\u0026gt; .... \u0026lt;/camelContext\u0026gt;       'use strict'; var containerId = JSON.parse(\"\\\"6ebe9e5874fe0030\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  1.2 Add camel-opentracing Camel tracing alone it\u0026rsquo;s not enough. Elastic APM has it\u0026rsquo;s own format but also suports OpenTracing, so we need to add camel-opentracing in our application to get traces in OpenTracing format.\nFirst of all, in our pom.xml we have to add:\ncamel-main springboot  1 2 3 4 5 6 7  \u0026lt;!-- Add this to your pom.xml --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.camel.springboot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;camel-opentracing\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;x.x.x\u0026lt;/version\u0026gt; \u0026lt;!-- use the same version as your Camel core version --\u0026gt; \u0026lt;/dependency\u0026gt;     1 2 3 4 5 6 7  \u0026lt;!-- Add this to your pom.xml --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.camel.springboot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;camel-opentracing-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;x.x.x\u0026lt;/version\u0026gt; \u0026lt;!-- use the same version as your Camel core version --\u0026gt; \u0026lt;/dependency\u0026gt;       'use strict'; var containerId = JSON.parse(\"\\\"d410d5aa3473f09e\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Now we need to activate it in our application. Add this to your main class:\ncamel-main springboot  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // 1. Import camel-opentracing import org.apache.camel.opentracing.OpenTracingTracer; ... public final class MyApplication { ... public static void main(String[] args) throws Exception { Main main = new Main(); ... // 2. Attach to your application  OpenTracingTracer ottracer = new OpenTracingTracer(); main.bind(\u0026#34;ottracer\u0026#34;, ottracer); ... main.run(args); } }     1 2 3 4 5 6 7 8 9  // 1. Import camel-opentracing import org.apache.camel.opentracing.starter.CamelOpenTracing; ... @SpringBootApplication @CamelOpenTracing // 2. Add the annotation public class Application { ...       'use strict'; var containerId = JSON.parse(\"\\\"6d1542de1e082a54\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  At this point Camel is making traces in OpenTracing format.\n It will generate a lot of \u0026ldquo;info\u0026rdquo; logs, so you may be interested to set tracing logs to \u0026ldquo;warn\u0026rdquo;, and avoid to generate a bunch dummy logs.\n 1.3 Add APM plugin APM has its own tracing format, thats why we have to add a plugin to convert traces in its format. In our pom.xml:\n1 2 3 4 5 6  \u0026lt;!-- Add to ypur pom.xml --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;co.elastic.apm\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;apm-opentracing\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.15.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   And link to Opentracing:\ncamel-main springboot  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ... import org.apache.camel.opentracing.OpenTracingTracer; // 1. Add this two packages import co.elastic.apm.opentracing.ElasticApmTracer; import io.opentracing.Tracer; ... public final class MyApplication { ... public static void main(String[] args) throws Exception { Main main = new Main(); ... OpenTracingTracer ottracer = new OpenTracingTracer(); main.bind(\u0026#34;ottracer\u0026#34;, ottracer); // 2. Instanciate the tracer  Tracer tracer = new ElasticApmTracer(); main.bind(\u0026#34;tracer\u0026#34;, tracer); ... main.run(args); } ... }     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  ... import org.apache.camel.opentracing.starter.CamelOpenTracing; // 1. add this two packages import co.elastic.apm.opentracing.ElasticApmTracer; import io.opentracing.Tracer; ... @SpringBootApplication @CamelOpenTracing public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } // 2. Instanciate APM to OpenTracing  @Bean public Tracer tracer() { return new ElasticApmTracer(); } }       'use strict'; var containerId = JSON.parse(\"\\\"64a43f54eeb38a74\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  We have a Camel application generating APM traces!\n2. Capture the traces with APM agent The last step is to mount an agent that reads this traces and sent them to an APM server. We have two options:\n Via -javaagent on run command Via dependency on pom.xml using an elastic apm agent attacher  Firstly here is how to configurate it. There are three ways:\n via elasticapm.properties file placed at src/main/resources via java environment variables via O.S. environment variables  Te minimun configuration is:\nelasticapm.properties java Environment O.S. Environtment  1 2 3  service_name=application-name application_packages=org.examle server_urls=http://elastic-apm:8200     1 2 3 4  $ java -Delastic.apm.service_name=application-name \\  -Delastic.apm.application_packages=org.examle \\  -Delastic.apm.server_urls=http://elastic-apm:8200 \\  ...     1 2 3  $ export ELASTIC_APM_SERVICE_NAME=application-name $ export ELASTIC_APM_APPLICATION_PACKAGES=org.examle $ export ELASTIC_APM_SERVER_URLS=http://elastic-apm:8200       'use strict'; var containerId = JSON.parse(\"\\\"37ddd0637943a52f\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  (option A) Using javaagent First we have to download the latest agent from mavenrepository: elastic-apm-agent\nThen we save the downloaded file in the same aplication folder. This is specially important if we use an elasticapm.properties file.\nFinaly we can start the application like this: java -javaagent:/my-app/elastic-apm-agent.jar -jar /my-app/app.jar\nWith this method we can choose when to run the app with the ache and when not.\n(option B) Embedding in the aplication To attach the agent using self-atach, we first need to add this dependency on pom.xml.\n1 2 3 4 5 6  \u0026lt;!-- Add to ypur pom.xml --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;co.elastic.apm\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;apm-agent-attach\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.15.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   To run the agent when our application boots, add this in the main class.\ncamel-main springboot  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  ... import org.apache.camel.opentracing.OpenTracingTracer; import co.elastic.apm.opentracing.ElasticApmTracer; import io.opentracing.Tracer; // 1. Add this package import co.elastic.apm.attach.ElasticApmAttacher; ... public final class MyApplication { ... public static void main(String[] args) throws Exception { Main main = new Main(); ... OpenTracingTracer ottracer = new OpenTracingTracer(); main.bind(\u0026#34;ottracer\u0026#34;, ottracer); Tracer tracer = new ElasticApmTracer(); main.bind(\u0026#34;tracer\u0026#34;, tracer); // 2. Attach the agent  ElasticApmAttacher.attach(); ... main.run(args); } ... }     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ... import org.apache.camel.opentracing.starter.CamelOpenTracing; import co.elastic.apm.opentracing.ElasticApmTracer; import io.opentracing.Tracer; // 1. Add this package import co.elastic.apm.attach.ElasticApmAttacher; ... @SpringBootApplication @CamelOpenTracing public class Application { public static void main(String[] args) { // 2. Attach the agent  ElasticApmAttacher.attach(); SpringApplication.run(Application.class, args); } @Bean public Tracer tracer() { return new ElasticApmTracer(); } }       'use strict'; var containerId = JSON.parse(\"\\\"7badc7c7327f1d2b\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Code examples  camel-springboot-elastic-apm camel-main-elastic-apm  ","description":"","id":0,"section":"blog","tags":["elasticsearch","apache camel","APM"],"title":"Camel with elastic APM","uri":"https://andreufontb.github.io/en/blog/1-01/camel-with-elastic-apm/"}]